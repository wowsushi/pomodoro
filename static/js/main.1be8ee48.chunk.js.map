{"version":3,"sources":["components/AddTask.js","components/TaskGroup.js","components/MainPanel.js","App.js","serviceWorker.js","index.js"],"names":["AddTask","react_default","a","createElement","class","onSubmit","this","props","handleSubmit","type","name","placeholder","value","task","onChange","handleChange","React","Component","TaskGroup","taskList","list","showMore","length","slice","href","i","push","key","id","MainPanel","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","e","target","setState","preventDefault","newTask","Date","now","prevState","concat","showActivityTask","components_AddTask","components_TaskGroup","App","components_MainPanel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAmBeA,mLAfX,OACEC,EAAAC,EAAAC,cAAA,QAAMC,MAAM,WAAWC,SAAUC,KAAKC,MAAMC,cAC1CP,EAAAC,EAAAC,cAAA,SACEM,KAAK,OACLC,KAAK,OACLC,YAAY,uBACZC,MAAON,KAAKC,MAAMM,KAClBC,SAAUR,KAAKC,MAAMQ,eAEvBd,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASC,KAAK,QAA3B,aAXcM,IAAMC,WC8BbC,mLA7BJ,IACDC,EAAcb,KAAKC,MAAnBY,SACFC,EAAO,GACPC,EAAW,GAEXF,EAASG,OAAS,IACpBH,EAAWA,EAASI,MAAM,EAAG,GAC7BF,EAAWpB,EAAAC,EAAAC,cAAA,KAAGqB,KAAK,KAAR,SAGb,IAAK,IAAIC,EAAE,EAAGA,EAAEN,EAASG,OAAQG,IAChCL,EAAKM,KACFzB,EAAAC,EAAAC,cAAA,MAAIwB,IAAKR,EAASM,GAAGG,IAAKT,EAASM,GAAGZ,KACpCZ,EAAAC,EAAAC,cAAA,KAAGC,MAAM,kBAAT,yBAKN,OACEH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,eACTH,EAAAC,EAAAC,cAAA,UACGiB,GAEFC,UAxBeL,IAAMC,WCwEfY,cApEb,SAAAA,EAAYtB,GAAO,IAAAuB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAzB,KAAAuB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAzB,KAAAyB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA7B,KAAMC,KACD6B,MAAM,CACTvB,KAAM,GACNM,SAAU,IAEZW,EAAKf,aAAee,EAAKf,aAAasB,KAAlBN,OAAAO,EAAA,EAAAP,CAAAD,IACpBA,EAAKtB,aAAesB,EAAKtB,aAAa6B,KAAlBN,OAAAO,EAAA,EAAAP,CAAAD,IAPHA,4EAUNS,GAAG,IACN3B,EAAU2B,EAAEC,OAAZ5B,MACRN,KAAKmC,SAAS,CACZ5B,KAAMD,yCAIG2B,GAEX,GADAA,EAAEG,iBACGpC,KAAK8B,MAAMvB,KAAhB,CAEA,IAAM8B,EAAU,CACd9B,KAAMP,KAAK8B,MAAMvB,KACjBe,GAAIgB,KAAKC,OAGXvC,KAAKmC,SAAS,SAAAK,GAAS,MAAK,CAC1B3B,SAAU2B,EAAU3B,SAAS4B,OAAOJ,GACpC9B,KAAM,GACNe,GAAI,wCAKN,IAAIoB,EAAmB,GAkBvB,OAjBI1C,KAAK8B,MAAMjB,SAASG,OAAS,EAC/B0B,EAAiBtB,KACfzB,EAAAC,EAAAC,cAAA,OAAKC,MAAM,iBACTH,EAAAC,EAAAC,cAAA,QAAMC,MAAM,8BACZH,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,QAAMC,MAAM,6BACZH,EAAAC,EAAAC,cAAA,sBAIJ6C,EAAiBtB,KACfzB,EAAAC,EAAAC,cAAA,OAAKC,MAAM,iBACTH,EAAAC,EAAAC,cAAA,iCAMNF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,cACTH,EAAAC,EAAAC,cAAC8C,EAAD,CACElC,aAAcT,KAAKS,aACnBP,aAAcF,KAAKE,aACnBK,KAAMP,KAAK8B,MAAMvB,OAElBmC,EACD/C,EAAAC,EAAAC,cAAC+C,EAAD,CACE/B,SAAUb,KAAK8B,MAAMjB,mBA9DLH,IAAMC,WCmCfkC,MAnCf,WACE,OACElD,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACTH,EAAAC,EAAAC,cAACiD,EAAD,MACAnD,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACTH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,OACTH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,MAAM,qBACRH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,kBAAT,SAGFH,EAAAC,EAAAC,cAAA,MAAIC,MAAM,aACRH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,kBAAT,iBAGFH,EAAAC,EAAAC,cAAA,MAAIC,MAAM,aACRH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,kBAAT,oBAINH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,QACTH,EAAAC,EAAAC,cAAA,yBAIJF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,SACTH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACTH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,kBAAT,eAEFH,EAAAC,EAAAC,cAAA,QAAMC,MAAM,wBCtBAiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1be8ee48.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass AddTask extends React.Component {\r\n  render() {\r\n    return (\r\n      <form class=\"add-task\" onSubmit={this.props.handleSubmit}>\r\n        <input  \r\n          type=\"text\" \r\n          name=\"task\" \r\n          placeholder=\"add a new mission...\" \r\n          value={this.props.task} \r\n          onChange={this.props.handleChange}>\r\n        </input>\r\n        <button type=\"submit\" name=\"task\">+</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddTask;","import React from 'react'\r\n\r\nclass TaskGroup extends React.Component {\r\n  render() {\r\n    let { taskList }  = this.props\r\n    let list = []\r\n    let showMore = ''\r\n\r\n    if (taskList.length > 3) {\r\n      taskList = taskList.slice(0, 3)\r\n      showMore = <a href=\"/\">more</a>\r\n    } \r\n\r\n    for (let i=0; i<taskList.length; i++) {\r\n     list.push(\r\n        <li key={taskList[i].id}>{taskList[i].task}\r\n          <i class=\"material-icons\">play_circle_outline</i>\r\n        </li>     \r\n      )\r\n    }\r\n  \r\n    return (\r\n      <div class=\"tasks-group\">\r\n        <ul>\r\n          {list}\r\n        </ul>\r\n        {showMore}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TaskGroup","import React from 'react'\r\n\r\nimport AddTask from './AddTask.js'\r\nimport TaskGroup from './TaskGroup.js'\r\n\r\nclass MainPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state={\r\n      task: '',\r\n      taskList: []\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n  }\r\n\r\n  handleChange(e) {\r\n    const { value } = e.target\r\n    this.setState({\r\n      task: value\r\n    })\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault()\r\n    if (!this.state.task) return\r\n    \r\n    const newTask = {\r\n      task: this.state.task,\r\n      id: Date.now()\r\n    }\r\n\r\n    this.setState(prevState => ({\r\n      taskList: prevState.taskList.concat(newTask),\r\n      task: '',\r\n      id: ''\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    let showActivityTask = []\r\n    if (this.state.taskList.length > 0) {\r\n      showActivityTask.push(\r\n        <div class=\"activity-task\">\r\n          <span class=\"circle-lg main-decoration\"></span>\r\n          <h3>the first thing to do today</h3>\r\n          <span class=\"circle-sm sub-decoration\"></span>\r\n          <div>25:00</div>\r\n        </div>\r\n      )\r\n    } else {\r\n      showActivityTask.push(\r\n        <div class=\"activity-task\">\r\n          <h3>No task. Add one?</h3>\r\n        </div>\r\n      )\r\n    } \r\n\r\n    return (\r\n    <div class=\"main-panel\">\r\n      <AddTask \r\n        handleChange={this.handleChange}\r\n        handleSubmit={this.handleSubmit} \r\n        task={this.state.task}\r\n      />\r\n      {showActivityTask}\r\n      <TaskGroup \r\n        taskList={this.state.taskList}\r\n      />\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MainPanel","import React from 'react';\nimport './App.css'\n\nimport MainPanel from './components/MainPanel.js'\n\nfunction App() {\n  return (\n    <div class=\"container\">\n      <MainPanel />\n      <div class=\"sub-panel\">\n        <nav class=\"nav\">\n          <ul>\n            <li class=\"to-do-list-folded\">\n              <i class=\"material-icons\">list</i>\n            </li>\n\n            <li class=\"analytics\">\n              <i class=\"material-icons\">insert_chart</i>\n            </li>\n\n            <li class=\"ringtones\">\n              <i class=\"material-icons\">library_music</i>\n            </li>\n          </ul>\n        </nav>\n        <div class=\"logo\">\n          <div>pomodoro</div>\n        </div>\n      </div>\n\n      <div class=\"clock\">\n        <div class=\"clock-btn\">\n          <i class=\"material-icons\">play_arrow</i>\n        </div>\n        <span class=\"clock-decoration\"></span>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}